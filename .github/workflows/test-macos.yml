name: macOS Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-macos:
    name: Test on macOS
    runs-on: macos-latest

    permissions:
      contents: write    # Allow push to gh-pages branch
      pages: write       # Allow GitHub Pages deployment
      id-token: write    # Allow deployment verification

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: brew install jq

      - name: Verify jq installation
        run: jq --version

      - name: Install bashcov for coverage
        run: gem install bashcov simplecov

      - name: Run test suite
        run: |
          chmod +x test/run-tests.sh
          ./test/run-tests.sh

      - name: Run tests with coverage
        run: |
          chmod +x test/run-tests.sh test/run-coverage.sh
          # Try to collect coverage - if it fails, badge will show test count only
          bashcov --root . ./test/run-coverage.sh || echo "Coverage collection failed, will show test count only"

          # Debug: show what was generated
          if [ -f coverage/index.html ]; then
            echo "Coverage report generated:"
            grep -o 'covered">.*<' coverage/index.html | head -5 || true
          else
            echo "No coverage report found"
          fi

      - name: Generate coverage badge JSON
        if: success()
        run: |
          test_count=$(grep -h "^test_" test/test-*.sh 2>/dev/null | wc -l | tr -d ' ')

          # Check if coverage report exists and has data
          if [ -f coverage/index.html ]; then
            # Try to extract coverage percentage
            coverage_percent=$(grep -o '<span class="percent">[0-9.]*%</span>' coverage/index.html | head -1 | grep -o '[0-9.]*' 2>/dev/null || echo "")

            # Check if we got valid coverage (not empty and not 0/0)
            if [ -n "$coverage_percent" ] && [ "$coverage_percent" != "0" ]; then
              echo "Coverage measured: ${coverage_percent}%"

              # Determine color based on coverage
              if [ $(echo "$coverage_percent >= 80" | bc) -eq 1 ]; then
                color="brightgreen"
              elif [ $(echo "$coverage_percent >= 60" | bc) -eq 1 ]; then
                color="green"
              elif [ $(echo "$coverage_percent >= 40" | bc) -eq 1 ]; then
                color="yellow"
              else
                color="red"
              fi

              message="${coverage_percent}% | ${test_count} tests"
            else
              echo "Warning: Coverage data is empty (0/0), using test count only"
              coverage_percent="N/A"
              color="blue"
              message="${test_count} tests"
            fi
          else
            echo "Warning: Coverage report not found, using test count only"
            coverage_percent="N/A"
            color="blue"
            message="${test_count} tests"
          fi

          # Generate shields.io endpoint JSON using jq
          jq -n \
            --arg label "tests" \
            --arg message "$message" \
            --arg color "$color" \
            '{
              schemaVersion: 1,
              label: $label,
              message: $message,
              color: $color
            }' > coverage-badge.json

          cat coverage-badge.json

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: bash,macos
          name: bash-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Prepare badge for deployment
        if: success() && github.ref == 'refs/heads/main'
        run: |
          mkdir -p .badge-deploy
          cp coverage-badge.json .badge-deploy/

      - name: Deploy badge to gh-pages
        if: success() && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .badge-deploy
          publish_branch: gh-pages
          keep_files: false
          enable_jekyll: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Update coverage badge'

      - name: Test summary
        if: always()
        run: |
          if [ -f test-results.txt ]; then
            cat test-results.txt
          fi
